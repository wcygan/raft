---
description: 
globs: 
alwaysApply: true
---
# Raft Core Implementation Learnings

When working with the core Raft types and logic in [`raft-core/src/lib.rs`](mdc:raft-core/src/lib.rs), keep the following points in mind based on recent refactoring and debugging:

1.  **Protobuf `uint64` vs. `Option<u64>`:**
    *   Standard Protobuf 3 `uint64` fields (without the `optional` keyword) map directly to Rust's `u64` via Prost, not `Option<u64>`.
    *   The absence of a value is represented by the default value (`0` for `u64`).
    *   **Example:** `HardState.voted_for` in [`proto/raft/v1/raft.proto`](mdc:proto/raft/v1/raft.proto) is `uint64`.

2.  **`voted_for` Convention:**
    *   The `HardState.voted_for` field should be treated as `u64` in Rust code.
    *   A value of `0` **must** be used to indicate that no vote has been cast for the current term. Do not use `None`.

3.  **State Management Structure:**
    *   The main `RaftState` struct should rely on its component substructs (`HardState`, `VolatileState`, `ServerState`, `LeaderState`) as the single source of truth for specific state variables.
    *   Avoid duplicating fields (like `commit_index`, `role`, `leader_id`) directly in `RaftState` if they already exist in a substruct. Access them via the substruct (e.g., `state.hard_state.commit_index`, `state.server.role`).

4.  **`Copy` vs. `Clone` for Proto Types:**
    *   Simple Protobuf message types generated by Prost (like `HardState`) often derive the `Copy` trait.
    *   Avoid unnecessary `.clone()` calls on these types; prefer direct copy (e.g., `*state` or returning the value directly). Check [`raft-storage/src/lib.rs`](mdc:raft-storage/src/lib.rs) for examples.

5.  **Local vs. Protobuf Types:**
    *   Be clear about whether a type (like `Role`) is defined locally within the Rust crate (e.g., `raft-core/src/lib.rs`) or generated from the Protobuf definitions. Ensure imports and usage match the actual source of the type definition.

6.  **Trait Implementation Signatures:**
    *   When implementing traits like `Storage`, ensure the method signatures (including `&self` vs. `&mut self`) exactly match the trait definition.
