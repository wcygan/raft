---
description: 
globs: 
alwaysApply: true
---
# Learnings from `raft-storage::InMemoryStorage` Implementation

When working with the Raft `Storage` trait implementation, particularly in-memory versions like [`raft-storage/src/lib.rs`](mdc:raft-storage/src/lib.rs), keep the following points in mind:

1.  **Absolute vs. Relative Log Indexing:** Raft log indices are *absolute*. Operations like `truncate_log_prefix` remove entries from the beginning of the underlying storage (e.g., a `Vec`), but the indices of the remaining entries *do not change*. Therefore, functions like `read_log_entry`, `read_log_entries`, and `last_log_index` **must** operate based on the absolute `index` field stored within each `LogEntry`, not the position within the `Vec`. Relying on `Vec` indices after prefix truncation will lead to incorrect results. The implementation in [`raft-storage/src/lib.rs`](mdc:raft-storage/src/lib.rs) was corrected to use `iter().find()` and `iter().filter()` based on `entry.index`.

2.  **Cargo Workspace vs. Path Dependencies:** In [`raft-storage/Cargo.toml`](mdc:raft-storage/Cargo.toml), dependencies on other crates within the same workspace (like `raft-core`) should use `path = "../raft-core"`. The `workspace = true` syntax is for inheriting shared *external* dependencies defined in the root `Cargo.toml`'s `[workspace.dependencies]` section. Mixing these up causes manifest parsing errors.

3.  **Stateful Testing Challenges:** Testing stateful components like storage requires careful consideration of operation sequences. As seen in `test_truncate_prefix` within [`raft-storage/src/lib.rs`](mdc:raft-storage/src/lib.rs), even if individual operations seem correct in isolation (verified by minimal tests like `test_truncate_prefix_minimal_no_op`), their combination in a specific sequence can reveal subtle bugs or edge cases. Debugging involves checking state transitions carefully.

4.  **Dependency Management & Code Hygiene:** Ensure dependencies are correctly scoped (e.g., `bytes` used only in tests belongs in `[dev-dependencies]`). Also, remove placeholder code (like initial `mod tests { ... }` blocks generated by `cargo new`) to avoid conflicts like duplicate module definitions when adding actual tests.
