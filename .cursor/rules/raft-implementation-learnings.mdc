---
description: 
globs: 
alwaysApply: true
---
# Raft Implementation & Testing Learnings (Leader Election Phase)

This document captures important lessons learned during the implementation and debugging of the Raft leader election phase, particularly from resolving issues in [`raft-core/tests/election_test.rs`](mdc:raft-core/tests/election_test.rs).

## Protocol Understanding

1.  **Deep State Transition Knowledge:** A precise understanding of Raft's state transitions is crucial. We encountered a bug because we incorrectly assumed followers would know the `leader_id` immediately after an election. **Key Point:** Followers only learn the leader's identity upon receiving an RPC (like AppendEntries/Heartbeat) from the confirmed leader.
2.  **Align Tests with Protocol Phases:** Assertions in tests must match the specific guarantees of the Raft protocol phase being tested. Don't test for post-heartbeat state during an election-only test.

## Testing Best Practices

1.  **Incremental Testing:** Progress from unit tests ([`raft-core/src/lib.rs`](mdc:raft-core/src/lib.rs) `mod tests`) to single-node integration tests, then multi-node integration tests ([`raft-core/tests/election_test.rs`](mdc:raft-core/tests/election_test.rs)). This isolates bugs effectively.
2.  **Realistic Assertions:** Verify only what the protocol guarantees at a given point. For `test_three_node_election`, we initially over-asserted by checking `leader_id` on followers too early. The fix involved relaxing assertions to match the post-election, pre-heartbeat state.
3.  **Detailed Logging is Key:** Trace-level logging within both the core logic (`handle_request_vote`, etc.) and test helpers (`spawn_raft_responder_task`, polling loops) was essential for diagnosing the timeout issue. Use structured logging (`target: "responder"`, `target: "poll"`) and include relevant state variables (`term`, `role`, `leader_id`). Remember to run tests with environment variables like `RUST_LOG=trace` and `--nocapture` for debugging.
4.  **Adequate Timeouts:** Integration tests involving simulated time or network interactions need sufficient timeouts (e.g., increased from 2s to 5s in `test_three_node_election`) to avoid spurious failures, especially in different environments (like CI).

## Implementation Structure

1.  **Async Ownership (`.clone()`):** When spawning async tasks or moving values into async blocks (like in test setup or polling loops), be mindful of ownership. Use `.clone()` appropriately for shared data (like `Arc<Mutex<RaftNode>>` or `cluster_node_ids` vector) to avoid "borrow of moved value" errors (E0382).
2.  **State Management Helpers:** Using internal helper methods like `become_follower`, `become_candidate`, `become_leader` within [`raft-core/src/lib.rs`](mdc:raft-core/src/lib.rs) promotes consistency and clarifies state transitions.

## Documentation & Comments

1.  **Explain Protocol Nuances:** Add comments explaining subtle Raft behaviors, especially where intuition might differ from the protocol spec (e.g., when followers learn `leader_id`).
2.  **Contextual TODOs:** Retain meaningful `TODO` comments (like sending initial heartbeats) to guide future development.

Applying these learnings helps build more robust, understandable, and verifiable Raft components.
